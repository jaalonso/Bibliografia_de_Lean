#+TITLE: Bibliografía de Lean

Recopilación de trabajos sobre Lean compartidos en
[[https://github.com/jaalonso/Lecturas_GLC][Lecturas del Grupo de Lógica Computacional]].

+ [[https://youtu.be/POHVMMG7pqE][10 minute Lean tutorial: proving logical propositions]]. ~ Kevin Buzzard.
+ [[https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md][100 theorems for Lean]]. ~ Floris van Doorn.
+ [[https://sites.google.com/view/berkeleyleanseminar/home][2020 Berkeley Lean Seminar]].
+ [[https://github.com/jozefg/learn-tt][A collection of resources for learning type theory and type theory adjacent fields]]. ~ Daniel Gratzer.
+ [[http://robertylewis.com/padics/padics.pdf][A formal proof of Hensel's lemma over the p-adic integers]]. ~ R.Y. Lewis.
+ [[https://arxiv.org/abs/1911.00385][A formal proof of PAC learnability for decision stumps]]. ~ J. Tassarotti, J.B. Tristan, K. Vajjha.
+ [[https://flypitch.github.io/assets/flypitch-cpp.pdf][A formal proof of the independence of the continuum hypothesis]]. ~ Jesse Michael Han, Floris van Doorn.
+ [[https://project-archive.inf.ed.ac.uk/ug4/20201778/ug4_proj.pdf][A formalisation of biochemical process languages in Lean]]. ~ Jonathan Coates.
+ [[https://github.com/xiw/arithcc][A formalization of "Correctness of a compiler for arithmetic expressions" (McCarthy and Painter 1967) using the Lean theorem prover]]. ~ Xi Wang.
+ [[https://lean-forward.github.io/lean-together/2019/slides/bentzen.pdf][A formalization of a Henkin-style completeness proof for propositional modal logic in Lean]]. ~ Bruno Bentzen.
+ [[http://bit.ly/2bUzV2n][A formalization of elementary group theory in the proof assistant Lean]]. ~ A. Zipperer
+ [[https://github.com/flypitch/flypitch-itp-2019/releases/download/1.0/flypitch-itp-2019.pdf][A formalization of forcing and the consistency of the failure of the continuum hypothesis]]. ~ Jesse Michael Han and Floris van Doorn.
+ [[https://arxiv.org/abs/1904.10570.pdf][A formalization of forcing and the unprovability of the continuum hypothesis]]. ~ J.M. Han, F. van Doorn.
+ [[http://www.andrew.cmu.edu/user/avigad/Papers/mutilated.pdf][A formalization of the mutilated chessboard problem in Lean]]. ~ Jeremy Avigad.
+ [[http://www.andrew.cmu.edu/user/avigad/Students/wu_thesis.pdf][A formally verified proof of Kruskal's tree theorem in Lean]]. ~ M. Wu
+ [[http://matryoshka.gforge.inria.fr/pubs/wagemaker_bsc_thesis.pdf][A formally verified proof of the Mason-Stothers theorem in Lean]]. ~ J.  Wagemaker
+ [[https://arxiv.org/abs/1802.01795][A Lean formalization of Matiyasevič's theorem]]. ~ Mario Carneiro
+ [[https://www.cs.vu.nl/~tbn305/publicaties/2020-ring_exp.pdf][A Lean tactic for normalising ring expressions with exponents]]. ~ Anne Baanen.
+ [[https://pp.ipd.kit.edu/uploads/publikationen/ebner17meta.pdf][A metaprogramming framework for formal verification]]. ~ G. Ebner et als.
+ [[https://limperg.de/paper/cpp2021-induction/draft.pdf][A novice-friendly induction tactic for Lean (Draft)]]. ~ Jannis Limperg.
+ [[https://gist.github.com/jorendorff/e50832fc9d58722015c7a488cd62c860][A one-line proof of the infinitude of primes]]. ~ Jason Orendorff.
+ [[https://github.com/foxthomson/impartial][A proof of the Sprague-Grundy theorem and other results related to impartial games in Lean]]. ~ Fox Thomson.
+ [[https://github.com/jldodds/coq-lean-cheatsheet][A quick reference for mapping Coq tactics to Lean tactics]]. ~ Joey Dodds.
+ [[https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/][A review of the Lean theorem prover]]. ~ Thomas Hales.
+ [[https://lean-forward.github.io/lean-together/2019/slides/wu.pdf][A verified tableau prover for modal logic K]]. ~ Minchao Wu.
+ [[http://bit.ly/1U0kbKQ][Algebra and analysis in the Lean theorem prover]]. ~ Rob Lewis
+ [[https://github.com/gihanmarasingha/miu_language][An MIU decision procedure in Lean]]. ~ Gihan Marasingha.
+ [[https://arxiv.org/abs/1712.09288][An extensible ad hoc interface between Lean and Mathematica]]. ~ R.Y. Lewis
+ [[https://leanprover-community.github.io/lean-web-editor/][An online JavaScript/WebAssembly version of Lean]].
+ [[https://lean-forward.github.io/internships/arithmetic_and_casting_in_lean.pdf][Arithmetic and casting in Lean]]. ~ Paul-Nicolas Madelaine.
+ [[https://arxiv.org/abs/2001.10490][Beyond notations: Hygienic macro expansion for theorem proving languages]]. ~ Sebastian Ullrich, Leonardo de Moura.
+ [[https://youtu.be/ATlAQPAtiTY][Building an algebraic hierarchy in Lean]]. ~ Kevin Buzzard.
+ [[https://www.quantamagazine.org/building-the-mathematical-library-of-the-future-20201001/][Building the mathematical library of the future]]. ~ Kevin Hartnett.
+ [[https://youtu.be/RTfjSlwbKjQ][Building the topological hierarchy in Lean]]. ~ Alex Best.
+ [[https://youtu.be/p8Etfv1_VqQ][Calculus and integration in Lean]]. ~ Yury Kudryashov.
+ [[http://chalkdustmagazine.com/features/can-computers-prove-theorems/][Can computers prove theorems?]] ~ Kevin Buzzard.
+ [[https://youtu.be/1NUc-ZNC_2s][Category theory in Lean]]. ~ Scott Morrison.
+ [[https://github.com/dselsam/certigrad][Certigrad: Bug-free machine learning on stochastic computation graphs]]. ~ D. Selsam
+ [[https://xenaproject.wordpress.com/2019/10/24/chalkdust-and-the-natural-number-game/][Chalkdust, and the natural number game!]] ~ Kevin Buzzard.
+ [[https://arxiv.org/abs/2001.07655][Coherence via wellfoundedness]]. ~ Nicolai Kraus, Jakob von Raumer.
+ [[https://xenaproject.wordpress.com/2019/01/12/column-addition][Column addition]]. ~ Kevin Buzzard.
+ [[https://github.com/adamtopaz/comb_geom][Combinatorial geometries in Lean]]. ~ Adam Topaz.
+ [[https://github.com/b-mehta/combinatorics][Combinatorics in Lean]]. ~ Bhavik Mehta.
+ [[https://lean-forward.github.io/logical-verification/2018/index.html][Course: Logical verification (2018-2019)]]. ~ J. Blanchette et als.
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11061/pdf/LIPIcs-ITP-2019-6.pdf][Data types as quotients of polynomial functors]]. ~ J. Avigad, M. Carneiro, S. Hudon.
+ [[https://lean-forward.github.io/lean-together/2019/slides/avigad.pdf][Datatypes as quotients of polynomial functors]]. ~ Jeremy Avigad.
+ [[https://techualization.blogspot.com/2020/05/design-by-contract-with-lean-theorem.html?m=0][Design by contract with Lean theorem prover]]. ~ Nam Nguyen.
+ [[https://arxiv.org/abs/1706.08605][Developing bug-free machine learning systems with formal mathematics]]. ~ D. Selsam, P. Liang, D.L. Dill
+ [[https://pp.ipd.kit.edu/uploads/publikationen/himmel20bachelorarbeit.pdf][Diagram chasing in interactive theorem proving]]. ~ Markus Himmel.
+ [[https://youtu.be/1xXRQmhldFs][Differential geometry in Lean]]. ~ Sebastien Gouëzel.
+ [[https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/][Division by zero in type theory: a FAQ]]. ~ Kevin Buzzard.
+ [[https://ahelwer.ca/post/2020-04-05-lean-assignment/][Doing a math assignment with the Lean theorem prover]]. ~ Andrew Helwer.
+ [[https://lean-forward.github.io/lean-together/2019/slides/hudon.pdf][Embedding specialized proof languages into Lean (A case study)]]. ~ Simon Hudon.
+ [[https://xenaproject.wordpress.com/2019/05/21/equality-part-1-definitional-equality/][Equality part 1: definitional equality]]. ~ Kevin Buzzard.
+ [[https://xenaproject.wordpress.com/2019/05/25/equality-part-2-syntactic-equality/][Equality part 2: syntactic equality]]. ~ Kevin Buzzard.
+ [[https://xenaproject.wordpress.com/2020/07/03/equality-specifications-and-implementations/][Equality, specifications, and implementations]]. ~ Kevin Buzzard.
+ [[https://esverify.org][esverify: Program verification for ECMAScript/JavaScript]]. ~ C. Schuster.
+ [[https://goo.gl/scholar/CHqqCY][esverify: Verifying dynamically-typed higher-order functional programs by SMT solving]]. ~ C. Schuster, S.  Banerjea, C. Flanagan.
+ [[https://observablehq.com/@bryangingechen/fibonacci-formalized-1-some-sums][Fibonacci formalized 1: some sums]]. ~ Bryan Gin-ge Chen.
+ [[https://observablehq.com/@bryangingechen/fibonacci-formalized-2-bees-and-cars][Fibonacci formalized 2: bees and cars]]. ~ Bryan Gin-ge Chen.
+ [[https://github.com/flypitch/flypitch][Flypitch: A formal proof of the independence of the continuum hypothesis]]. ~ Jesse Michael Han and Floris van Doorn.
+ [[http://www.andrew.cmu.edu/user/avigad/Talks/quarantine.pdf][Formal Mathematics and the Lean theorem prover]]. ~ Jeremy Avigad.
+ [[https://github.com/IMO-grand-challenge/formal-encoding][Formal encoding of IMO (International Mathematical Olympiad) problems]]. ~ Daniel Selsam.
+ [[https://pps2018.soic.indiana.edu/files/2017/12/dselsam_pps_2018.pdf][Formal methods for probabilistic programming]]. ~ D. Selsam, P. Liang, D.L.  Dill
+ [[http://www.andrew.cmu.edu/user/avigad/Talks/stanford_formal_methods.pdf][Formal methods in mathematics and the Lean theorem prover]]. ~ J. Avigad
+ [[https://arxiv.org/pdf/1705.03307][Formalisations using two-level type theory]]. ~ D. Annenkov, P. Capriotti & N. Kraus
+ [[https://xenaproject.wordpress.com/2018/09/22/formalising-mathematics-a-mathematicians-personal-viewpoint][Formalising mathematics: a mathematician's personal viewpoint]]. ~ Kevin Buzzard
+ [[https://arxiv.org/abs/1910.12320][Formalising perfectoid spaces]]. ~ Kevin Buzzard, Johan Commelin, Patrick Massot.
+ [[http://wwwf.imperial.ac.uk/~buzzard/one_off_lectures/ug_maths.pdf][Formalising undergraduate mathematics]] [Slides].  ~ Kevin Buzzard.
+ [[https://youtu.be/FDx0nXFQloE][Formalising undergraduate mathematics]] [Video] ~ Kevin Buzzard.
+ [[https://github.com/levjj/esverify-theory/][Formalism and proofs for esverify]]. ~ Christopher Schuster.
+ [[http://lsfa2020.ufba.br/lsfa2020-preproc.pd][Formalization of cryptographic algorithms in the Lean Theorem Prover]]. ~ Guilherme Gomes Felix da Silva, Edward Hermann Haeusler, Bruno Lopes.f
+ [[http://bit.ly/1ed22bQ][Formalization of non-abelian topology for Homotopy Type Theory]]. ~ Jakob von Raumer
+ [[https://www.maxwell.vrac.puc-rio.br/35851/35851.PDF][Formalização de algoritmos de criptografia em um assistente de provas interativo]]. ~ Guilherme Gomes Felix da Silva.
+ [[https://leanprover-community.github.io/100.html][Formalizing 100 theorems in Lean]].
+ [[http://www.andrew.cmu.edu/user/avigad/meetings/fomm2020/slides/fomm_massot.pdf][Formalizing a sophisticated definition]]. ~ Patrick Massot, Kevin Buzzard, Johan Commelin.
+ [[https://arxiv.org/abs/1810.08380][Formalizing computability theory via partial recursive functions]]. ~ M. Carneiro.
+ [[https://arxiv.org/abs/2010.02595][Formalizing the ring of Witt vectors]]. ~ Johan Commelin, Robert Y. Lewis.
+ [[https://lean-forward.github.io/e-g/e-g.pdf][Formalizing the solution to the cap set problem]]. ~ S. Dahmen, J. Hölzl, R.Y. Lewis.
+ [[https://pp.ipd.kit.edu/uploads/publikationen/huisinga19bachelorarbeit.pdf][Formally verified insertion of reference counting instructions]]. ~ Marc Huisinga.
+ [[https://youtu.be/SdXvUU75cDA][Groups, rings, and fields in Lean]]. ~ Johan Commelin.
+ [[https://arxiv.org/abs/1802.04315][Higher groups in Homotopy Type Theory]]. ~ U. Buchholtz, F. van Doorn, E. Rijke
+ [[https://arxiv.org/pdf/1704.06781][Homotopy Type Theory in Lean]]. ~ U. Buchholtz, F. van Doorn & J. von Raumer
+ [[https://imo-grand-challenge.github.io][IMO (International Mathematical Olympiad) grand challenge: an AI which solves IMO problems in Lean]].
+ [[https://github.com/leanprover-community/mathlib/blob/6b3a2d1d07abe083e281b3617f376cabc6043e66/archive/imo/imo1964_q1.lean][IMO 1964 Q1 in Lean]]. ~ Kevin Buzzard.
+ [[https://github.com/leanprover-community/mathlib/blob/dfa85b54bbba02433e0cb924547808ff5120f78c/archive/imo/imo1981_q3.lean][IMO 1981 Q3 in Lean]]. ~ Kevin Lacker.
+ [[https://github.com/leanprover-community/mathlib/blob/a249c9a4ee252ad64171fa779883d48c3a0fe93a/archive/imo/imo1998_q2.lean][IMO 1998 Q2 in Lean]]. ~ Oliver Nash.
+ [[https://xenaproject.wordpress.com/2019/08/01/imo-2019-q1/][IMO 2019 Q1]]. ~ Kevin Buzzard.
+ [[https://github.com/leanprover-community/mathlib/blob/c83c28a1ef16790f62c893379b75f77d30ab068e/archive/imo/imo2019_q4.lean][IMO 2019 problem 4 in Lean]]. ~ Floris van Doorn.
+ [[https://youtu.be/b59fpAJ8Mfs][Infinitude of primes: a Lean theorem prover demo]]. ~ Scott Morrison.
+ [[https://www.math.u-psud.fr/~pmassot/enseignement/math114/][Introduction aux mathématiques formalisées]]. ~ Patrick Massot.
+ [[https://www.cs.ru.nl/bachelors-theses/2020/Rick_Koenders___4576519___Intuitionism_in_Lean.pdf][Intuitionism in Lean]]. ~ Rick Koenders.
+ [[https://arxiv.org/abs/1907.07801][Iterated chromatic localisation]].  ~ Neil Strickland, Nicola Bellumat.
+ [[https://leanprover-community.github.io/mathlib_docs/analysis/convex/integral.html][Jensen's inequality for integrals in Lean]].
+ [[https://agentultra.github.io/lean-for-hackers/][Lean 3 for hackers]]. ~ J Kenneth King.
+ [[http://leanprover.github.io/talks/LeanPLDI.pdf][Lean 4]]. ~ Leonardo de Moura, Sebastian Ullrich.
+ [[https://lean-forward.github.io/][Lean Forward: Usable computer-checked proofs and computations for number theorists]].
+ [[https://github.com/kbuzzard/xena][Lean Library currently studying for a degree at Imperial College]]. ~ Kevin Buzzard.
+ [[https://apurvanakade.github.io/courses/lean_at_MC2020/index.html][Lean at Mathcamp 2020]]. ~ Apurva Nakade, Jalex Stark.
+ [[https://github.com/NeilStrickland/itloc][Lean code formalising many of the proofs from the paper "Iterated chromatic localisation"]]. ~ Neil Strickland, Nicola Bellumat.
+ [[https://xenaproject.wordpress.com/2020/07/17/lean-for-the-curious-mathematician-2020/][Lean for the Curious Mathematician 2020]]. ~ Kevin Buzzard.
+ [[https://leanprover-community.github.io/lftcm2020/][Lean for the curious mathematician: A virtual workshop on computer-checked mathematics]].
+ [[https://xenaproject.wordpress.com/2019/02/11/lean-in-latex][Lean in LaTeX]]. ~ Kevin Buzzard.
+ [[https://xenaproject.wordpress.com/2020/02/09/lean-is-better-for-proper-maths-than-all-the-other-theorem-provers/][Lean is better for proper maths than all the other theorem provers]]. ~ Kevin Buzzard.
+ [[http://leanprover.github.io/presentations/20150123_lean-mode/lean-mode.pdf][lean-mode (emacs mode for Lean Theorem Prover)]]. ~ Soonho Kong, Leonardo de Moura.
+ [[https://wiki.alcidesfonseca.com/blog/lean-tutorial-mere-mortals/][Lean tutorial for mere mortals]]. ~ Alcides Fonseca.
+ [[https://youtu.be/gAuvVPw6_CQ][Lean: The Calculator on Steroids]]. ~ James Arthur.
+ [[http://bit.ly/1CEUHpV][Lean: a new theorem prover that aims to bridge the gap between interactive and automated theorem proving]].
+ [[https://xenaproject.wordpress.com/2018/12/30/learning-lean-by-example][Learning Lean by example]]. ~ Kevin Buzzard.
+ [[https://www.andrew.cmu.edu/user/avigad/Papers/learning_logic_and_proof.pdf][Learning logic and proof with an interactive theorem prover]]. ~ J. Avigad.
+ [[https://youtu.be/EnZvGCU_jp][Linear algebra in Lean]]. ~ Anne Baanen.c
+ [[https://github.com/fpvandoorn/lean-links][Links to recourses for the Lean Theorem Prover]]. ~ Floris van Doorn.
+ [[https://leanprover.github.io/logic_and_proof][Logic and proof]]. ~ J. Avigad, R.Y. Lewis, F. van Doorn
+ [[https://youtu.be/WGwKefZ8KFo][Logic in Lean]]. ~ Jeremy Avigad.
+ [[https://github.com/blanchette/logical_verification_2019/raw/master/logical_verification_in_lean.pdf][Logical verification in Lean]]. ~ A. Bentkamp, J. Blanchette, J. Hölzl.
+ [[https://leanprover-community.github.io/lftcm2020/][Lean for the curious mathematician: A virtual workshop on computer-checked mathematics]]
+ [[https://xenaproject.wordpress.com/2019/05/06/m1f-imperial-undergraduates-and-lean/][M1F, Imperial undergraduates, and Lean]]. ~ Kevin Buzzard.
+ [[https://youtu.be/5HDlgsjO8-w][Maintaining a library of formal Mathematics]]. ~ Gabriel Ebner.
+ [[https://link.springer.com/chapter/10.1007/978-3-030-53518-6_16][Maintaining a library of formal mathematics]]. ~ Floris van Doorn, Gabriel Ebner, Robert Y. Lewis.
+ [[https://youtu.be/lw8EfTmWzRU][Mathematics in Lean introduction]]. ~ Patrick Massot.
+ [[https://leanprover-community.github.io/mathematics_in_lean/][Mathematics in Lean]]. ~ Jeremy Avigad, Kevin Buzzard, Robert Y. Lewis, Patrick Massot.
+ [[https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/][Mathematics in type theory]]. ~ Kevin Buzzard.
+ [[https://leanprover-community.github.io/contribute/naming.html][Mathlib naming conventions]]. ~ Jeremy Avigad.
+ [[https://github.com/leanprover/mathlib][mathlib: Lean mathematical components library]].
+ [[https://lean-forward.github.io/lean-together/2019/slides/hoelzl.pdf][mathlib: Lean's mathematical library]]. ~ Johannes Hölzl.
+ [[https://matryoshka-project.github.io/pubs/lehenaff_report.pdf][Meta-programming with the Lean proof assistant]]. ~ Pablo Le Hénaff.
+ [[https://www.youtube.com/playlist?list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2][Metaprogramming in Lean]]. ~ Robert Y. Lewis.
+ [[https://lean-forward.github.io/lean-together/2019/slides/barton.pdf][Model categories in Lean]]. ~ Reid Barton.
+ [[https://homes.cs.washington.edu/~thickstn/docs/lean.pdf][Number theory in a proof assistant]]. ~ John Thickstun.
+ [[https://youtu.be/iEs2U_kzYy4][Numbers in Lean]]. ~ Rob Lewis.
+ [[http://www.andrew.cmu.edu/user/avigad/meetings/fomm2020/slides/fomm_gouezel.pdf][On a mathematician's attempts to formalize his own research in proof assistants]]. ~ Sébastien Gouëzel.
+ [[https://leanprover-community.github.io/lftcm2020/][Lean for the curious mathematician: A virtual workshop on computer-checked mathematics]]
+ [[https://arxiv.org/pdf/1808.10690][On the formalization of higher inductive types and synthetic homotopy theory]]. ~ F. vanDoorn.
+ [[https://youtu.be/vsnB7W9nODI][Order structures in Lean]]. ~ Kevin Buzzard.
+ [[https://leanprover-community.github.io/mathlib_docs/field_theory/primitive_element.html][Primitive element theorem in Lean]].
+ [[https://github.com/NeilStrickland/lean_primes][Proof in Lean that there are infinitely many primes]]. ~ Neil Strickland.
+ [[https://xenaproject.wordpress.com/2019/06/15/proofs-are-not-programs/][Proofs are not programs]]. ~ Kevin Buzzard.
+ [[https://youtu.be/SJ-_zqw5UHk][Proving excluded middle in Lean (FP lunch 25/9/20)]]. ~ Thorsten Altenkirch.
+ [[https://raw.githubusercontent.com/maxd13/logic-soundness/master/docs/paper_final.pdf][Proving the consistency of Logic in Lean]]. ~ Luiz Carlos R. Viana.
+ [[https://plus.maths.org/content/pure-maths-crisis][Pure maths in crisis?]] ~ M. Freiberger.
+ [[https://xenaproject.wordpress.com/2018/07/25/quadratic-reciprocity-and-p2-1-8/][Quadratic reciprocity and (p2-1)/8]]. ~ The Xena Project
+ [[http://www.andrew.cmu.edu/user/avigad/Students/baek_ms_thesis.pdf][Reflected decision procedures in lean]]. ~ S. Baek.
+ [[https://youtu.be/qlJrCtYiEkI][Sets in Lean]]. ~ Jeremy Avigad.
+ [[https://pp.info.uni-karlsruhe.de/uploads/publikationen/ullrich16masterarbeit.pdf][Simple verification of Rust programs via functional purification]]. ~ S.  Ullrich
+ [[https://lean-forward.github.io/norm_cast/norm_cast.pdf][Simplifying casts and coercions]]. ~ Robert Y. Lewis, Paul-Nicolas Madelaine.
+ [[https://github.com/alashworth/sf-lean/][Software Foundations in Lean]]. ~ Andrew Ashworth.
+ [[https://www.youtube.com/playlist?list=PLlF-CfQhukNloaV_NiVvgJt-Pr6lQd56q][Structures and classes in Lean]]. ~ Floris van Doorn.
+ [[https://arxiv.org/abs/2001.04301][Tabled typeclass resolution]]. ~ D. Selsam, S. Ullrich, L. de Moura.
+ [[https://www.youtube.com/playlist?list=PLlF-CfQhukNkWwZt45vkNfWfuO-tBBqPN][Talks from the formal methods in Mathematics / Lean together 2020 workshop]].
+ [[https://www.twitch.tv/videos/661148267][Teaching Lean what a group is (ignoring the fact that it actually already knows)]]. ~ Kevin Buzzard.
+ [[https://xenaproject.wordpress.com/2020/06/27/teaching-dependent-type-theory-to-4-year-olds-via-mathematics/][Teaching dependent type theory to 4 year olds via mathematics]]. ~ Kevin Buzzard.
+ [[https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf][The Hitchhiker's Guide to Logical Verification]]. ~ Anne Baanen, Alexander Bentkamp, Jasmin Blanchette, Johannes Hölzl.
+ [[http://aitp-conference.org/2020/slides/DS.pdf][The IMO Grand Challenge]]. ~ Daniel Selsam.
+ [[https://leanprover-community.github.io/papers/mathlib-paper.pdf][The Lean mathematical library]]. ~ The mathlib Community.
+ [[http://bit.ly/1SZ9qcb][The Lean theorem prover (system description)]]. ~ L. de Moura, S. Kong, J. Avigad, F. Van Doorn & J.  von Raumer
+ [[http://www.newton.ac.uk/files/seminar/20170629110012002-1003186.pdf][The Lean theorem prover]]. ~ Jeremy Avigad
+ [[http://olivernash.org/2020/08/08/mathlib/index.html][The Mathlib formalisation project needs your help (A serious effort to formalise modern mathematics)]]. ~ Oliver Nash.
+ [[https://youtu.be/OEZCp63GES8][The complex number game, levels 1 to 3]]. ~ Kevin Buzzard.
+ [[https://xenaproject.wordpress.com/2020/05/23/the-complex-number-game/][The complex number game]]. ~ Kevin Buzzard.
+ [[https://www.twitch.tv/videos/627659597][The complex numbers are a ring]]. ~ Kevin Buzzard.
+ [[https://writings.stephenwolfram.com/2020/09/the-empirical-metamathematics-of-euclid-and-beyond/][The empirical metamathematics of Euclid and beyond]]. ~ Stephen Wolfram.
+ [[http://wwwf.imperial.ac.uk/~buzzard/one_off_lectures/msr.pdf][The future of mathematics?]] ~ Kevin Buzzard.
+ [[https://xenaproject.wordpress.com/2019/06/11/the-inverse-of-a-bijection/][The inverse of a bijection]]. ~ Kevin Buzzard.
+ [[https://xenaproject.wordpress.com/2020/04/30/the-invisible-map/][The invisible map]]. ~ Kevin Buzzard.
+ [[http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/][The natural number game]]. ~ K. Buzzard, M. Pedramfar.
+ [[https://youtu.be/9V1Xo1n_3Qw][The natural number game : an introduction to Lean tactics]]. ~ Kevin Buzzard.
+ [[http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html][The sandwich theorem]]. ~ Kevin Buzzard.
+ [[https://xenaproject.wordpress.com/2020/06/05/the-sphere-eversion-project/][The sphere eversion project]]. ~ Kevin Buzzard.
+ [[https://github.com/kbuzzard/xena/blob/master/tactics.md][The ten (or so) basic tactics]]. ~ Kevin Buzzard.
+ [[https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf][The type theory of Lean]] ~ Mario Carneiro.
+ [[http://bit.ly/2g4PbuF][Theorem proving in Lean]]. ~ J. Avigad, L. de Moura y S. Kong
+ [[https://github.com/jjaassoonn/transcendental][Theorems in transcendental number theory]]. ~ Jujian Zhang.
+ [[https://youtu.be/hhOPRaR3tx0][Topology and filters in Lean]]. ~ Patrick Massot.
+ [[https://users.soe.ucsc.edu/~cschuster/phd/phd_thesis.pdf][Towards live programming environments for statically verified JavaScript]]. ~ C. Schuster.
+ [[http://robertylewis.com/files/dissertation.pdf][Two tools for formalizing mathematical proofs]]. ~ R.Y. Lewis
+ [[https://xenaproject.wordpress.com/2020/07/23/two-types-of-universe-for-two-types-of-mathematician/][Two types of universe for two types of mathematician]]. ~ Kevin Buzzard.
+ [[https://leanprover-community.github.io/undergrad.html][Undergraduate mathematics in mathlib]].
+ [[https://leanprover-community.github.io/mathlib_docs/algebra/universal_enveloping_algebra.html][Universal enveloping algebra in Lean]].
+ [[http://www.andrew.cmu.edu/user/avigad/meetings/fomm2020/slides/fomm_strickland.pdf][Using Lean for new research]]. ~ Neil Strickland.
+ [[https://lean-forward.github.io/lean-together/2019/slides/buzzard.pdf][Using Lean with undergraduate mathematicians]]. ~ Kevin Buzzard.
+ [[http://matryoshka.gforge.inria.fr/pubs/fischer_msc_thesis.pdf][Verification of GPU program optimizations in Lean]]. ~ B. Fischer.
+ [[http://drops.dagstuhl.de/opus/volltexte/2019/11086/pdf/LIPIcs-ITP-2019-31.pdf][Verified decision procedures for modal logics]]. ~ M. Wu, R. Goré.
+ [[https://xenaproject.wordpress.com/2018/10/07/what-is-the-xena-project/][What is the Xena Project?]] ~ Kevin Buzzard
+ [[https://xenaproject.wordpress.com/what-maths-is-in-lean/][What maths is in Lean?]] ~ Kevin Buzzard.
+ [[https://xenaproject.wordpress.com/2020/02/09/where-is-the-fashionable-mathematics/][Where is the fashionable mathematics?]] ~ Kevin Buzzard.
